* UI settings
** Theme
   #+begin_src emacs-lisp
    (use-package modus-themes
      :init
      (setq modus-themes-italic-constructs t
	    modus-themes-bold-constructs nil
	    modus-themes-region '(bg-only no-extend))
      :config
      (load-theme 'modus-vivendi :no-confirm)
      (define-key global-map (kbd "<f5>") #'modus-themes-toggle))
   #+end_src
** Mode-line
#+begin_src emacs-lisp
(setq column-number-mode t)
#+end_src

** No toolbar, menu-bar nor scroll bar
#+begin_src emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)

(when window-system
  (scroll-bar-mode -1))
#+end_src

** Line numbers
*** Line numbers
[[https://github.com/kisswiki/kisswiki/blob/master/src/code_editors/emacs/line-numbers.md][https://github.com/kisswiki/kisswiki/blob/master/src/code_editors/emacs/line-numbers.md]]
#+begin_src emacs-lisp
(defun my/init-line-numbers-mode ()
  "Initialize line numbers mode."
  (display-line-numbers-mode)
  (setq display-line-numbers-witdth-start t))
#+end_src

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'my/init-line-numbers-mode)
#+end_src
*** Hilight line
#+begin_src emacs-lisp
(custom-set-faces
 '(line-number-current-line ((t (:foreground "Royalblue" :background "DarkGray")))))
#+end_src
** Window settings
*** Window size
#+begin_src emacs-lisp
(when window-system (set-frame-size (selected-frame) 200 80))
#+end_src
*** Three way split
#+begin_src emacs-lisp
(defun my/three-way-split ()
  "Split the screen three ways."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer)
  (balance-windows))
#+end_src
*** Window split
#+begin_src emacs-lisp
(global-set-key (kbd "C-c w h") 'split-window-horizontally)
(global-set-key (kbd "C-c w v") 'split-window-vertically)
#+end_src

*** Window threshold
#+begin_src emacs-lisp
(setq split-height-threshold nil)
(setq split-width-threshold 0)
#+end_src

** Minormodes
#+begin_src emacs-lisp
(use-package minions
  :config
  (minions-mode 1))
#+end_src

** Git
*** Fringe helper
#+begin_src emacs-lisp
(use-package fringe-helper)
#+end_src

*** Git gutter
#+begin_src emacs-lisp
(use-package git-gutter
  :ensure t
  :diminish git-gutter-mode
  :init
  (setq git-gutter:window-width 1
        git-gutter:update-interval 2
        git-gutter:modified-sign "│"
        git-gutter:added-sign "│"
        git-gutter:deleted-sign "│")
  :config
  (set-face-foreground 'git-gutter:modified "#ffb86c") ; dracula rainbow-5
  (set-face-foreground 'git-gutter:added "#50fa7b") ; dracula rainbow-6
  (set-face-foreground 'git-gutter:deleted "#ff5555") ; dracula rainbow-9
  (add-to-list 'git-gutter:update-hooks 'focus-in-hook)
  (add-hook 'magit-post-refresh-hook 'git-gutter:update-all-windows)
  (global-git-gutter-mode t))
#+end_src

*** TEMP svg error for Emacs 28.2
see [[https://emacs.stackexchange.com/questions/74289/emacs-28-2-error-in-macos-ventura-image-type-invalid-image-type-svg][here]]
#+begin_src emacs-lisp
;; overriding image.el function image-type-available-p
(defun image-type-available-p (type)
  "Return t if image type TYPE is available.
Image types are symbols like `xbm' or `jpeg'."
  (if (eq 'svg type)
      nil
    (and (fboundp 'init-image-library)
         (init-image-library type))))
#+end_src
