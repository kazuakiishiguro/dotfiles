* Helm
#+begin_src emacs-lisp
(use-package helm
  :config
  (helm-mode 1))
#+end_src

* Magit
#+begin_src emacs-lisp
(use-package magit
  :if (executable-find "git")
  :bind ("C-x g" . magit-status))
#+end_src

* Which-key
#+begin_src emacs-lisp
(use-package which-key
  :custom (which-key-popup-type 'minibuffer)
  :config (which-key-mode))
#+end_src

* Docker
#+begin_src emacs-lisp
(use-package dockerfile-mode)
(use-package docker-compose-mode)
#+end_src

* Org
** Base
#+begin_src emacs-lisp
(use-package org
  :custom ((org-src-fontify-natively t)
           (org-src-tab-acts-natively nil)
           (org-edit-src-content-indentation 0)
           (org-export-with-smart-quotes t)
           (org-adapt-indentation nil)
           (org-src-preserve-indentation t)
           (org-hide-emphasis-markers t)
           (org-confirm-babel-evaluate nil))
  :hook ((org-mode . visual-line-mode)))
#+end_src

** Template
*** Load org-tempo
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

*** Basic
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
             '("s" . "src"))
#+end_src

*** emacs-lisp
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
             '("el" . "src emacs-lisp"))
#+end_src

*** Rust
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
             '("rs" . "src rust"))
#+end_src

*** LaTeX
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
             '("tex" . "src latex"))
#+end_src

** Task management
*** File directory
#+begin_src emacs-lisp
(setq org-directory "~/org")

(defun org-file-path (filename)
   "Return the absolute address of an org file, given its relative name"
   (concat (file-name-as-directory org-directory) filename))

(setq org-index-file (org-file-path "index.org"))
(setq org-archive-location
	 (concat (org-file-path "archive.org") "::* From %s"))
#+end_src

*** index.org file
#+begin_src emacs-lisp
(setq org-agenda-files (list org-index-file))
#+end_src

*** Capture
**** =TODO= keywords
#+begin_src emacs-lisp
(setq org-todo-keywords
	'((sequence "TODO(t)" "NOTE(n)" "DONE(d)" "CANCEL(c)")))
#+end_src

**** Capturing tasks
#+begin_src emacs-lisp
(setq org-capture-templates
     '(("b" "Blog idea" entry (file "~/org/notes/blog-ideas.org")
     "* %?\n")
     ("l" "Log" entry (file+datetree "~/org/log.org")
     "* %?\nEntered on %U\n  %i\n  %a")
     ("n" "Note taking" entry (file "~/org/notes/note.org")
     "* %?\n %U %f")
     ("t" "Todo" entry (file+headline org-index-file "Inbox")
     "* TODO %?\n")))
#+end_src

**** Task archive
#+begin_src emacs-lisp
(defun my/mark-done-and-archive ()
  "Mark the state of an org-mode item as DONE and archive it."
  (interactive)
  (org-todo 'done)
  (org-archive-subtree))

(define-key org-mode-map (kbd "C-c C-x C-s") 'my/mark-done-and-archive)
#+end_src

**** Time keeping
#+begin_src emacs-lisp
(setq org-log-done 'time)
#+end_src

*** Keybindings
#+begin_src emacs-lisp
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)
#+end_src

**** Quick =index.org= file access
#+begin_src emacs-lisp
(defun my/org-open-index ()
  "Open the master TODO list."
    (interactive)
    (find-file org-index-file)
    (flycheck-mode -1)
    (end-of-buffer))

(global-set-key (kbd "C-c i") 'my/org-open-index)
#+end_src

**** Capture template access
#+begin_src emacs-lisp
(defun my/org-capture-todo ()
  (interactive)
  (org-capture :keys "t"))

(global-set-key (kbd "M-n") 'my/org-capture-todo)
#+end_src

** Exporting
*** LaTeX
#+begin_src emacs-lisp
(require 'ox-latex)
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (shell . t)
    (js . t)
    (latex . t)
    (python . t)))
#+end_src

*** Disable asking before evaluation
#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src

*** htmlize for org exports
#+begin_src emacs-lisp
(use-package htmlize)
#+end_src

**** Footer configuration
#+begin_src emacs-lisp
(setq org-html-postamble nil)
#+end_src

*** Org export for github markdown
#+begin_src emacs-lisp
(use-package ox-gfm)
#+end_src

* Util
** No backup, auto-save
#+begin_src emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+end_src

** Editor setting
*** Edit
#+begin_src emacs-lisp
(defun my/visit-emacs-config ()
  (interactive)
  (find-file "~/.emacs.d"))

(global-set-key (kbd "C-c f .") 'my/visit-emacs-config)
#+end_src

*** Reload
#+begin_src emacs-lisp
(defun my/reload-emacs-config ()
  (interactive)
  (load-file "~/.emacs.d/init.el"))

(global-set-key (kbd "C-c f r") 'my/reload-emacs-config)
#+end_src

** Better scroll
#+begin_src emacs-lisp
(setq scroll-conservatively 9999
      scroll-preserve-screen-position t
      scroll-margin 5)
#+end_src

** Always kill current buffer
#+begin_src emacs-lisp
(defun volatile-kill-buffer ()
  "Kill current buffer unconditionally."
  (interactive)
  (let ((buffer-modified-p nil))
    (kill-buffer (current-buffer))))

(global-set-key (kbd "C-x k") 'volatile-kill-buffer)     ;; Unconditionally kill unmodified buffers.
#+end_src

** Delete other windows setting
#+begin_src emacs-lisp
(defun my/kill-another-buffer ()
  "Kill another buffer if it exists."
  (interactive)
  (delete-other-windows))

(global-set-key (kbd "C-q") 'my/kill-another-buffer)
#+end_src
** Insert line before
#+begin_src emacs-lisp
(defun my/insert-line-before ()
  "Insert a newline(s) above the line containing the cursor."
  (interactive)
  (save-excursion
    (move-beginning-of-line 1)
    (newline)))

(global-set-key (kbd "C-o") 'my/insert-line-before)
#+end_src

** y-or-n
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Disable visual bell
#+begin_src emacs-lisp
(setq rign-bell-function 'ignore)
#+end_src
** Trim trailing whitespace
#+begin_src emacs-lisp
(use-package ws-butler
  :diminish ws-butler-mode
  :config
  (ws-butler-global-mode))
#+end_src

