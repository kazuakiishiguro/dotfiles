* Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :config
  (helm-mode 1))
#+END_SRC

* Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :custom (which-key-popup-type 'minibuffer)
  :config (which-key-mode))
#+END_SRC

* Docker
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode)
(use-package docker-compose-mode)
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp
(use-package org
  :custom ((org-src-fontify-natively t)
           (org-src-tab-acts-natively nil)
           (org-edit-src-content-indentation 0)
           (org-export-with-smart-quotes t)
           (org-adapt-indentation nil)
           (org-src-preserve-indentation t)
           (org-hide-emphasis-markers t)
           (org-confirm-babel-evaluate nil))
  :hook ((org-mode . org-indent-mode)
  (org-mode . visual-line-mode)))
#+END_SRC

** Template
*** emacs-lisp
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
             '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

*** Rust
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
             '("rs" "#+BEGIN_SRC rust\n?\n#+END_SRC"))
#+END_SRC

*** LaTeX
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-structure-template-alist
             '("tex" "#+BEGIN_SRC latex\n?\n#+END_SRC"))
#+END_SRC

** Task management
*** File directory
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")

(defun org-file-path (filename)
   "Return the absolute address of an org file, given its relative name"
   (concat (file-name-as-directory org-directory) filename))

(setq org-index-file (org-file-path "index.org"))
(setq org-archive-location
	 (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC

*** index.org file
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (list org-index-file))
#+END_SRC

*** Capture
**** =TODO= keywords
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
	'((sequence "TODO(t)" "NOTE(n)" "DONE(d)" "CANCEL(c)")))
#+END_SRC

**** Capturing tasks
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
     '(("b" "Blog idea"
	 entry
	 (file "~/org/notes/blog-ideas.org")
	 "* %?\n")
	("n" "Note taking"
	 entry
	 (file "~/org/notes/note.org")
	 "* %?\n %U %f")
	("t" "Todo"
	 entry
	 (file+headline org-index-file "Inbox")
	 "* TODO %?\n")))
#+END_SRC

**** Task archive
#+BEGIN_SRC emacs-lisp
(defun my/mark-done-and-archive ()
  "Mark the state of an org-mode item as DONE and archive it."
  (interactive)
  (org-todo 'done)
  (org-archive-subtree))

(define-key org-mode-map (kbd "C-c C-x C-s") 'my/mark-done-and-archive)
#+END_SRC

**** Time keeping
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC

*** Keybindings
#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC

**** Quick =index.org= file access
#+BEGIN_SRC emacs-lisp
(defun my/org-open-index ()
  "Open the master TODO list."
    (interactive)
    (find-file org-index-file)
    (flycheck-mode -1)
    (end-of-buffer))

(global-set-key (kbd "C-c i") 'my/org-open-index)
#+END_SRC

**** Capture template access
#+BEGIN_SRC emacs-lisp
(defun my/org-capture-todo ()
  (interactive)
  (org-capture :keys "t"))

(global-set-key (kbd "M-n") 'my/org-capture-todo)
#+END_SRC

** Exporting
#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (shell . t)
    (js . t)
    (latex . t)
    (python . t)))
#+END_SRC

*** Disable asking before evaluation
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

*** htmlize for org exports
#+BEGIN_SRC emacs-lisp
(use-package htmlize)
#+END_SRC

**** Footer configuration
#+BEGIN_SRC emacs-lisp
(setq org-html-postamble nil)
#+END_SRC

*** Org export for github markdown
#+BEGIN_SRC emacs-lisp
(use-package ox-gfm)
#+END_SRC

* Util
** No backup, auto-save
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC

** Better scroll
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 9999
      scroll-preserve-screen-position t
      scroll-margin 5)
#+END_SRC

** Always kill current buffer
#+BEGIN_SRC emacs-lisp
(defun volatile-kill-buffer ()
  "Kill current buffer unconditionally."
  (interactive)
  (let ((buffer-modified-p nil))
    (kill-buffer (current-buffer))))

(global-set-key (kbd "C-x k") 'volatile-kill-buffer)     ;; Unconditionally kill unmodified buffers.
#+END_SRC

** y-or-n
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
