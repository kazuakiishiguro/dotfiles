* Code generation
** company
#+begin_src emacs-lisp
 (use-package company
   :bind
   (:map company-active-map
	 ("C-n". company-select-next)
	 ("C-p". company-select-previous)
	 ("M-<". company-select-first)
	 ("M->". company-select-last))
   (:map company-mode-map
	 ("<tab>". tab-indent-or-complete)
	 ("TAB". tab-indent-or-complete)))
 #+end_src

*** Extra setting

#+begin_src emacs-lisp
 (defun company-yasnippet-or-completion ()
  (interactive)
  (or (do-yas-expand)
      (company-complete-common)))

(defun check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
      (backward-char 1)
      (if (looking-at "\\.") t
        (backward-char 1)
        (if (looking-at "::") t nil)))))

(defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
    (yas/expand)))

(defun tab-indent-or-complete ()
  (interactive)
  (if (minibufferp)
      (minibuffer-complete)
    (if (or (not yas/minor-mode)
            (null (do-yas-expand)))
        (if (check-expansion)
            (company-complete-common)
          (indent-for-tab-command)))))
#+end_src

* Lint
** flycheck
#+begin_src emacs-lisp
 (use-package flycheck
   :config
   (global-flycheck-mode)
   (add-hook 'elpy-mode-hook 'flycheck-mode))
#+end_src

* Language Server Protocol
** lsp-mode

#+begin_src emacs-lisp
 (use-package lsp-mode
   :commands lsp
   :custom
   ;; what to use when checking on-save. "check" is default, I prefer clippy
   (lsp-rust-analyzer-cargo-watch-command "clippy")
   (lsp-eldoc-render-all t)
   (lsp-idle-delay 0.6)
   ;; This controls the overlays that display type and other hints inline. Enable
   ;; / disable as you prefer. Well require a `lsp-workspace-restart' to have an
   ;; effect on open projects.
   (lsp-rust-analyzer-server-display-inlay-hints t)
   (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
   (lsp-rust-analyzer-display-chaining-hints t)
   (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
   (lsp-rust-analyzer-display-closure-return-type-hints t)
   (lsp-rust-analyzer-display-parameter-hints nil)
   (lsp-rust-analyzer-display-reborrow-hints nil)
   :config
   (add-to-list 'lsp-disabled-clients 'rls)
   (add-hook 'python-mode-hook 'lsp)
   (add-hook 'lsp-mode-hook 'lsp-ui-mode))
#+end_src

** lsp-ui

#+begin_src emacs-lisp
(use-package lsp-ui
  :ensure
  :commands lsp-ui-mode
  :custom
  (lsp-ui-peek-always-show t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-doc-enable nil))
#+end_src

** lsp-treemacs
#+begin_src emacs-lisp
(use-package lsp-treemacs
  :commands lsp-treemacs-errors-list)
#+end_src
* Snippet
** yasnippet
#+begin_src emacs-lisp
 (use-package yasnippet
   :config
   (yas-reload-all)
   (add-hook 'prog-mode-hook 'yas-minor-mode)
   (add-hook 'text-mode-hook 'yas-minor-mode))
#+end_src
* Utils
** Smart parens
#+begin_src emacs-lisp
(use-package smartparens
  :config
  (smartparens-global-mode 1))
#+end_src

** Smart new line
[[https://gist.github.com/brianloveswords/e23cedf3a80bab675fe5][https://gist.github.com/brianloveswords/e23cedf3a80bab675fe5]]
#+begin_src emacs-lisp
(defun my/smart-newline ()
  "Add two newlines and put the cursor at the right indentation
     between them if a newline is attempted when the cursor is between
     two curly braces, otherwise do a regular newline and indent"
  (interactive)
  (if (or
       (and (equal (char-before) 123) ; {
            (equal (char-after) 125)) ; }
       (and (equal (char-before) 40)  ; (
            (equal (char-after) 41))) ; )
       (progn (newline-and-indent)
            (split-line)
            (indent-for-tab-command))
            (newline-and-indent)))

(global-set-key (kbd "RET") 'my/smart-newline)
#+end_src

** Multiple cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
  :bind
  ("C-c m e" . mc/edit-lines)
  ("C->" . mc/mark-next-like-this)
  ("C-<" . mc/mark-previous-like-this)
  ("C-c m a" . mc/mark-all-like-this))
#+end_src

** Exec path
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (progn
      (when (memq window-system '(mac ns x))
	(exec-path-from-shell-initialize))))

 ;;(setq exec-path (cons (expand-file-name "~/.bin") exec-path))
 ;; (setq exec-path (cons (expand-file-name "~/.cargo/bin") exec-path))
#+end_src
* Search
** Counsel
   #+begin_src emacs-lisp
    (use-package counsel
      :config
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (global-set-key (kbd "C-s") 'swiper-isearch)
      (global-set-key (kbd "M-s") 'counsel-git-grep)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "C-x b") 'ivy-switch-buffer)
      :init
      (ivy-mode 1))
   #+end_src
** Find file in projects
   #+begin_src emacs-lisp
   (use-package find-file-in-project)
   #+end_src
